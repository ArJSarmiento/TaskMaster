package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"crud_ql/auth"
	"crud_ql/graph/model"
	"errors"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	sub, err := auth.SignUp(ctx, *r.AUTH, input)
	if err != nil {
		return nil, err
	}

	user, err := r.DB.CreateUser(input, sub)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.UpdateUser(id, input), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input string) (*model.DeleteUserResponse, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.DeleteUser(input), nil
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.CreateTask(input), nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTaskInput) (*model.Task, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.UpdateTask(id, input), nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (*model.DeleteTaskResponse, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.DeleteTask(id), nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInRequest) (*model.SignInResponse, error) {
	response, err := auth.SignIn(ctx, *r.AUTH, input)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.GetUsers(), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}
	user, err := r.DB.GetUser(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.GetTasks(), nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	if user := auth.ForContext(ctx); user == nil {
		return nil, errors.New("NOT VERIFIED")
	}

	return r.DB.GetTask(id), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
